import tkinter as tk
from tkinter import ttk, messagebox
import random
import threading
import time
from datetime import datetime

class CameraHacker:
    def __init__(self, root):
        self.root = root
        self.root.title("üî¥ CameraHack Pro v3.0 - BY MrLader")
        self.root.geometry("850x650")
        self.root.configure(bg='#0a0a0a')
        self.root.resizable(False, False)
        
        self.scanning = False
        self.cameras_found = []
        self.current_camera = None
        
        self.create_interface()
        
    def create_interface(self):
        # Header
        header_frame = tk.Frame(self.root, bg='#0a0a0a')
        header_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = tk.Label(header_frame,
                             text="üî¥ CAMERA HACK PRO v3.0",
                             font=("Courier", 18, "bold"),
                             fg="#ff0000",
                             bg="#0a0a0a")
        title_label.pack()
        
        dev_label = tk.Label(header_frame,
                           text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ MrLader",
                           font=("Arial", 10, "italic"),
                           fg="#00ff00",
                           bg="#0a0a0a")
        dev_label.pack()
        
        # Control Panel
        control_frame = tk.LabelFrame(self.root,
                                    text="–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø",
                                    font=("Arial", 10, "bold"),
                                    fg="#00ffff",
                                    bg="#0a0a0a",
                                    bd=2)
        control_frame.pack(fill='x', padx=10, pady=5)
        
        # IP Configuration
        ip_frame = tk.Frame(control_frame, bg="#0a0a0a")
        ip_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(ip_frame, text="–î–∏–∞–ø–∞–∑–æ–Ω IP:", fg="white", bg="#0a0a0a").pack(side='left')
        self.ip_combo = ttk.Combobox(ip_frame,
                                   values=[
                                       "192.168.1.1-255",
                                       "192.168.0.1-255", 
                                       "10.0.0.1-255",
                                       "172.16.1.1-255"
                                   ],
                                   width=20)
        self.ip_combo.set("192.168.1.1-255")
        self.ip_combo.pack(side='left', padx=5)
        
        tk.Label(ip_frame, text="–ü–æ—Ä—Ç—ã:", fg="white", bg="#0a0a0a").pack(side='left', padx=(20,0))
        self.port_combo = ttk.Combobox(ip_frame,
                                     values=[
                                         "80,443,554",
                                         "8000,8080,34567",
                                         "21,22,23,25,53,80,443,554,993,995,1433,1723,3389,8080"
                                     ],
                                     width=25)
        self.port_combo.set("80,443,554")
        self.port_combo.pack(side='left', padx=5)
        
        # Buttons
        btn_frame = tk.Frame(control_frame, bg="#0a0a0a")
        btn_frame.pack(fill='x', padx=5, pady=5)
        
        self.scan_btn = tk.Button(btn_frame,
                                text="üöÄ –ù–ê–ß–ê–¢–¨ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï",
                                command=self.start_scan,
                                bg="#ff0000",
                                fg="white",
                                font=("Arial", 10, "bold"),
                                width=20)
        self.scan_btn.pack(side='left', padx=5)
        
        self.stop_btn = tk.Button(btn_frame,
                                text="‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨",
                                command=self.stop_scan,
                                bg="#555555",
                                fg="white",
                                state="disabled")
        self.stop_btn.pack(side='left', padx=5)
        
        self.view_btn = tk.Button(btn_frame,
                                text="üëÅÔ∏è –ü–†–û–°–ú–û–¢–†",
                                command=self.view_camera,
                                bg="#0055ff",
                                fg="white")
        self.view_btn.pack(side='left', padx=5)
        
        # Progress
        progress_frame = tk.Frame(self.root, bg="#0a0a0a")
        progress_frame.pack(fill='x', padx=10, pady=5)
        
        self.progress = ttk.Progressbar(progress_frame,
                                      orient="horizontal",
                                      length=800,
                                      mode="determinate")
        self.progress.pack(pady=5)
        
        self.status_label = tk.Label(progress_frame,
                                   text="üî¥ –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...",
                                   fg="#ffff00",
                                   bg="#0a0a0a",
                                   font=("Arial", 9))
        self.status_label.pack()
        
        # Results
        results_frame = tk.LabelFrame(self.root,
                                    text="üìπ –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ö–ê–ú–ï–†–´",
                                    font=("Arial", 10, "bold"),
                                    fg="#00ff00",
                                    bg="#0a0a0a")
        results_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Treeview for cameras
        columns = ("IP", "–ü–æ—Ä—Ç", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–ú–æ–¥–µ–ª—å", "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å")
        self.tree = ttk.Treeview(results_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=120)
        
        self.tree.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Camera View
        view_frame = tk.LabelFrame(self.root,
                                 text="–ü–†–Ø–ú–ê–Ø –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø",
                                 font=("Arial", 10, "bold"),
                                 fg="#ff00ff",
                                 bg="#0a0a0a")
        view_frame.pack(fill='x', padx=10, pady=5)
        
        self.camera_display = tk.Label(view_frame,
                                     text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
                                          "üî¥ –ö–ê–ú–ï–†–ê –ù–ï –í–´–ë–†–ê–ù–ê\n\n"
                                          "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ MrLader - –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö",
                                     bg="black",
                                     fg="white",
                                     font=("Courier", 10),
                                     width=80,
                                     height=8,
                                     relief="sunken")
        self.camera_display.pack(padx=5, pady=5)
        
        # Footer
        footer = tk.Label(self.root,
                        text="‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: MrLader",
                        fg="#888888",
                        bg="#0a0a0a",
                        font=("Arial", 8))
        footer.pack(pady=5)
    
    def generate_camera_info(self):
        brands = {
            "HikVision": ["DS-2CD2143", "DS-2DE3220", "DS-2CD2085"],
            "Dahua": ["IPC-HFW1230", "IPC-HDW2230", "SD22204T"],
            "Axis": ["M3045", "P3225", "Q1615"],
            "Bosch": ["MIC-710", "FLEXIDOME", "AUTODOME"],
            "Sony": ["SNC-VB770", "SNC-EM600"]
        }
        
        locations = ["–ì–æ—Å—Ç–∏–Ω–∞—è", "–£–ª–∏—Ü–∞", "–û—Ñ–∏—Å", "–ü–∞—Ä–∫–æ–≤–∫–∞", "–í—Ö–æ–¥", "–ó–∞–¥–Ω–∏–π –¥–≤–æ—Ä"]
        statuses = ["üî¥ –£—è–∑–≤–∏–º–∞", "üü° –ó–∞—â–∏—â–µ–Ω–∞", "üî¥ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]
        
        brand = random.choice(list(brands.keys()))
        model = random.choice(brands[brand])
        location = random.choice(locations)
        status = random.choice(statuses)
        
        return brand, model, location, status
    
    def scan_network(self):
        self.status_label.config(text="üü° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")
        self.progress['value'] = 0
        
        total_ips = 254
        found = 0
        
        for i in range(total_ips):
            if not self.scanning:
                break
                
            time.sleep(0.03)
            self.progress['value'] = (i / total_ips) * 100
            self.root.update()
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä
            if random.random() < 0.08:
                found += 1
                ip = f"192.168.1.{random.randint(1, 254)}"
                port = random.choice([80, 443, 554, 8000, 8080])
                brand, model, location, status = self.generate_camera_info()
                
                camera_data = (ip, str(port), brand, model, location, status)
                self.cameras_found.append(camera_data)
                self.tree.insert("", "end", values=camera_data)
                
                self.status_label.config(text=f"üü¢ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {found}")
        
        self.status_label.config(text=f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ: {found} –∫–∞–º–µ—Ä")
        self.scanning = False
        self.scan_btn.config(state="normal", bg="#ff0000")
        self.stop_btn.config(state="disabled", bg="#555555")
        self.progress['value'] = 100
    
    def start_scan(self):
        self.scanning = True
        self.scan_btn.config(state="disabled", bg="#555555")
        self.stop_btn.config(state="normal", bg="#ff0000")
        self.cameras_found = []
        self.tree.delete(*self.tree.get_children())
        
        scan_thread = threading.Thread(target=self.scan_network)
        scan_thread.daemon = True
        scan_thread.start()
    
    def stop_scan(self):
        self.scanning = False
        self.status_label.config(text="üî¥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.scan_btn.config(state="normal", bg="#ff0000")
        self.stop_btn.config(state="disabled", bg="#555555")
    
    def view_camera(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        
        item = self.tree.item(selected[0])
        camera_data = item['values']
        self.current_camera = camera_data
        
        self.status_label.config(text=f"üü£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {camera_data[0]}:{camera_data[1]}...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.root.after(1500, self.show_camera_stream)
    
    def show_camera_stream(self):
        if self.current_camera:
            ip, port, brand, model, location, status = self.current_camera
            
            stream_text = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë               –ü–†–Ø–ú–ê–Ø –¢–†–ê–ù–°–õ–Ø–¶–ò–Ø                 ‚ïë
‚ïë         {ip}:{port} - {brand} {model}        ‚ïë
‚ïë             –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}            ‚ïë
‚ïë             –°—Ç–∞—Ç—É—Å: {status}                    ‚ïë
‚ïë                                                  ‚ïë
‚ïë     [–°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–´–ô –ü–†–û–°–ú–û–¢–†]                    ‚ïë
‚ïë                                                  ‚ïë
‚ïë   üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: RTSP –ø–æ—Ç–æ–∫                    ‚ïë
‚ïë   üîì –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä             ‚ïë
‚ïë   üìä –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080 @ 30fps              ‚ïë
‚ïë   üïí –í—Ä–µ–º—è: {datetime.now().strftime("%H:%M:%S")}              ‚ïë
‚ïë                                                  ‚ïë
‚ïë          –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ MrLader ¬© 2024             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
            self.camera_display.config(text=stream_text, fg="#00ff00")
            self.status_label.config(text=f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {ip} - –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")

def main():
    root = tk.Tk()
    app = CameraHacker(root)
    root.mainloop()

if __name__ == "__main__":
    main()